/* Settings */
/* ================================================== */
/* Set default values for variables */
:root {
	--hamburger-padding-x: 6px;
	--hamburger-padding-y: 6px;
	--hamburger-layer-width: 30px;
	--hamburger-layer-height: 4px;
	--hamburger-layer-spacing: 6px;
	--hamburger-layer-color: #000;
	--hamburger-layer-border-radius: 4px;
	--hamburger-hover-opacity: 0.7;
	--hamburger-active-layer-color: var(--hamburger-layer-color);
	--hamburger-active-hover-opacity: var(--hamburger-hover-opacity);
	--hamburger-hover-use-filter: false;
	--hamburger-hover-filter: opacity(50%);
	--hamburger-active-hover-filter: var(--hamburger-hover-filter);
}

/* Base Hamburger (We need this) */
/* ================================================== */
/* Import the base hamburger styles */
/* Hamburger */
/* ================================================== */
.hamburger {
	padding: var(--hamburger-padding-y) var(--hamburger-padding-x);
	display: inline-block;
	cursor: pointer;
	transition-property: opacity, filter;
	transition-duration: 0.15s;
	transition-timing-function: linear;
	font: inherit;
	color: inherit;
	text-transform: none;
	background-color: transparent;
	border: 0;
	margin: 0;
	overflow: visible;
}
.hamburger:hover {
	/* filter: var(--hamburger-hover-filter); */
	opacity: var(--hamburger-hover-opacity);
}
.hamburger.is-active:hover {
	/* filter: var(--hamburger-active-hover-filter); */
	opacity: var(--hamburger-active-hover-opacity);
}
.hamburger.is-active .hamburger-inner,
.hamburger.is-active .hamburger-inner::before,
.hamburger.is-active .hamburger-inner::after {
	background-color: var(--hamburger-active-layer-color);
}

.hamburger-box {
	width: var(--hamburger-layer-width);
	height: calc(var(--hamburger-layer-height) * 3 + var(--hamburger-layer-spacing) * 2);
	display: inline-block;
	position: relative;
}

.hamburger-inner {
	display: block;
	top: 50%;
	margin-top: calc(var(--hamburger-layer-height) / -2);
}
.hamburger-inner,
.hamburger-inner::before,
.hamburger-inner::after {
	width: var(--hamburger-layer-width);
	height: var(--hamburger-layer-height);
	background-color: var(--hamburger-layer-color);
	border-radius: var(--hamburger-layer-border-radius);
	position: absolute;
	transition-property: transform;
	transition-duration: 0.15s;
	transition-timing-function: ease;
}
.hamburger-inner::before,
.hamburger-inner::after {
	content: "";
	display: block;
}
.hamburger-inner::before {
	top: calc((var(--hamburger-layer-spacing) + var(--hamburger-layer-height)) * -1);
}
.hamburger-inner::after {
	bottom: calc((var(--hamburger-layer-spacing) + var(--hamburger-layer-height)) * -1);
}

/* Hamburger types */
/* ================================================== */
/* Import styles for various hamburger types */
/* Spring */
/* ================================================== */
.hamburger--spring .hamburger-inner {
	top: calc(var(--hamburger-layer-height) / 2);
	transition: background-color 0s 0.13s linear;
}
.hamburger--spring .hamburger-inner::before {
	top: calc(var(--hamburger-layer-height) + var(--hamburger-layer-spacing));
	transition:
		top 0.1s 0.2s cubic-bezier(0.33333, 0.66667, 0.66667, 1),
		transform 0.13s cubic-bezier(0.55, 0.055, 0.675, 0.19);
}
.hamburger--spring .hamburger-inner::after {
	top: calc((var(--hamburger-layer-height) * 2) + (var(--hamburger-layer-spacing) * 2));
	transition:
		top 0.2s 0.2s cubic-bezier(0.33333, 0.66667, 0.66667, 1),
		transform 0.13s cubic-bezier(0.55, 0.055, 0.675, 0.19);
}
.hamburger--spring.is-active .hamburger-inner {
	transition-delay: 0.22s;
	background-color: transparent !important;
}
.hamburger--spring.is-active .hamburger-inner::before {
	top: 0;
	transition:
		top 0.1s 0.15s cubic-bezier(0.33333, 0, 0.66667, 0.33333),
		transform 0.13s 0.22s cubic-bezier(0.215, 0.61, 0.355, 1);
	transform: translate3d(0, calc(var(--hamburger-layer-spacing) + var(--hamburger-layer-height)), 0) rotate(45deg);
}
.hamburger--spring.is-active .hamburger-inner::after {
	top: 0;
	transition:
		top 0.2s cubic-bezier(0.33333, 0, 0.66667, 0.33333),
		transform 0.13s 0.22s cubic-bezier(0.215, 0.61, 0.355, 1);
	transform: translate3d(0, calc(var(--hamburger-layer-spacing) + var(--hamburger-layer-height)), 0) rotate(-45deg);
}

